git init     #把当前目录变成git可以管理的仓库， git只能在可以管理的仓库下进行管理
##git只能跟踪文本文件改动，所以尽量使用vscode的UTF-8文件，别用windows记事本
 
git add xxx    #把文件xxx添加到仓库(添加到暂存区‘Stage’或者叫index)

git commit -m "xxxx"   #把暂存区文件提交到仓库(分支)，-m 后面的是本次提交的说明

git status #查看仓库当前状态(可显示文件是否被修改，是否准备提交等)

git diff xxx #查看文件的修改内容

git log #显示提交日志

git log --pretty=oneline #显示提交日志(简化成一行)

##第一行commit:xxx和开头是commit id(指向文件版本的id)

git reset --hard HEAD^ #把当前版本回退到上个版本

# 'HEAD' 表示当前版本 'HEAD^' 表示上个版本 'HEAD^^'表示上上个版本. 以此类推
# 'HEAD~100' 表示前100个版本

git reset --hard 'commit id' #回退到commit id 版本，commit id 是上面log所显示的id，前几位就可，git会自动搜索

# git 内部个有指向当前HEAD的指针， 所以退版本等操作相当于改变HEAD指针位置

git reflog  #查看历史命令(可以确认版本回退后，回退前的版本ID)

#没有git add 到暂存区的文件 不会加入到commit中

git checkout -- xxx #丢弃工作区的修改（回到最近一次 git commit 或者git add 后的状态,git rm 误删后可以通过这个恢复）

git restore xxx  #丢弃工作区的修改 （回到最近一次 git commit 或者git add 后的状态）

git rest HEAD xxx  #丢弃暂存区的修改（git add 后的队列)

rm xxx #cmd指令删除文件

git rm xxx #从版本库里删除文件，删除后需要重新git commit

git remote add [shortname] [url] #添加远程仓库

git remote add origin git@github.com:xxxx/xxxx.git  #把本地的xxx仓库添加到github的xxx(我的是KeikiChen)账号上

#添加后的远程库名字是origin(也可以更改)

git push #把当前分支推送到远程

#git push -u origin master #把master分支推送到origin远程库 
#'-u' 参数把本地master分支和远程master分支关联起来 
#之后可以直接 
git push origin master
#推送最新修改

git remote -v #查看远程库信息

git remote rm xxx #解除和xxx远程库的关系，删除的话需要登录到github在后台进行删除








